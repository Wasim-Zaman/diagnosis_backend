generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
    id                String    @id @default(uuid())
    email             String    @unique
    password          String
}

model User {
  id                String      @id @default(uuid())
  fullName          String
  mobileNumber      String   @unique
  email             String   @unique
  password          String
  age               Int
  gender            Gender
  image             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Banner {
  id        String   @id @default(uuid())
  image     String
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id                     String           @id @default(uuid())
  name                   String
  description            String
  image                  String?
  amount                 Float
  discount               Float?
  fasting_time           String?
  result_duration        String?
  sample_type            String
  age_group              String
  home_sample_collection String?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  packages               Package[]
  serviceBookings        ServiceBooking[]
}

model Enquiry {
  id           String   @id @default(uuid())
  created_at   DateTime @default(now())
  enquiry      String?
  phoneNumber  String
  formated_date String?
  image        String?
  status       String?
  remarks      String?
  images       Json?
  updatedAt    DateTime @updatedAt
}

model Package {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  discount    Float?
  image       String?
  includes    Json
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServiceBooking {
  id              String   @id @default(uuid())
  patientName     String
  mobileNumber    String
  preference      Preference
  address         String?
  date            DateTime
  time            String
  paymentType     PaymentType
  totalPrice      Float
  status          Status
  user            String
  service         Service  @relation(fields: [serviceId], references: [id])
  serviceId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Preference {
  LAB_VISIT
  HOME_SAMPLE
  CLINIC
}

enum PaymentType {
  ONLINE
  CASH
}

enum Status {
    COMPLETED
    PENDING
    CANCELLED
}
